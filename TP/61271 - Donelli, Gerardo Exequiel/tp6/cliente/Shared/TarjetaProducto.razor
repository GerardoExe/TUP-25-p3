@using cliente.Models
@using cliente.Services
@inject CarritoService CarritoService

<div class="card h-100 shadow-sm">    
    <div class="position-relative" style="height: 200px;">
        <img src="@(imagenError ? imagenPorDefecto : Producto.ImagenUrl)" 
             class="card-img-top p-3 position-absolute w-100 h-100" 
             alt="@Producto.Nombre" 
             style="object-fit: contain;"
             @onerror="OnImageError">
    </div>
    <div class="card-body d-flex flex-column">
        <h5 class="card-title">@Producto.Nombre</h5>
        <p class="card-text flex-grow-1">@Producto.Descripcion</p>
        <div class="d-flex justify-content-between align-items-center">
            <span class="h5 mb-0">$@Producto.Precio.ToString("N2")</span>
            <span class="text-muted">Stock: @Producto.Stock</span>
        </div>
        <button class="btn btn-primary mt-3 w-100" 
                @onclick="AgregarAlCarrito"
                  disabled="@(Producto.Stock <= 0 || CantidadEnCarrito >= 10)"> @*Botón para agregar al carrito, deshabilitado si no hay stock o si ya se alcanzó el máximo permitido*@ 
            @(Producto.Stock > 0 ? "Agregar al carrito" : "Sin stock")
        </button>
    </div>
</div>

@code {
    [Parameter]
    public ProductoDTO Producto { get; set; } = default!;

    private bool imagenError = false;
    private string imagenPorDefecto = "images/no-image.png";

    // Obtiene la cantidad actual de este producto en el carrito
    private int CantidadEnCarrito => CarritoService.ObtenerItems()
                                       .FirstOrDefault(i => i.ProductoId == Producto.Id)?.Cantidad ?? 0;

    private void AgregarAlCarrito()
    {
        if (Producto.Stock > 0 && CantidadEnCarrito < 10)
        {
            CarritoService.AgregarItem(Producto);
        }
    }

    private void OnImageError()
    {
        imagenError = true;
    }
}
